package Hotel.Management.System;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * Handles user authentication for Hotel Management System
 * Features:
 * - Secure login using username and password
 * - SQL injection-safe validation via prepared statements
 * - UI feedback and error handling
 */
public class Login extends JFrame implements ActionListener {

    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginBtn, clearBtn, signupBtn;

    public Login() {
        setTitle("Hotel Management System - Login");
        setSize(400, 300);
        setLocationRelativeTo(null);
        setLayout(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        getContentPane().setBackground(Color.WHITE);

        JLabel title = new JLabel("Login to HMS");
        HotelStyles.styleLabel(title, true);
        title.setBounds(120, 20, 200, 30);
        add(title);

        JLabel userLabel = new JLabel("Username:");
        HotelStyles.styleLabel(userLabel, false);
        userLabel.setBounds(50, 80, 100, 25);
        add(userLabel);

        usernameField = HotelStyles.createInputField();
        usernameField.setBounds(150, 80, 180, 25);
        add(usernameField);

        JLabel passLabel = new JLabel("Password:");
        HotelStyles.styleLabel(passLabel, false);
        passLabel.setBounds(50, 120, 100, 25);
        add(passLabel);

        passwordField = new JPasswordField();
        passwordField.setFont(HotelStyles.BODY_FONT);
        passwordField.setBounds(150, 120, 180, 25);
        add(passwordField);

        loginBtn = new JButton("Login");
        HotelStyles.styleButton(loginBtn, "primary");
        loginBtn.setBounds(50, 180, 90, 30);
        loginBtn.addActionListener(this);
        add(loginBtn);

        clearBtn = new JButton("Clear");
        HotelStyles.styleButton(clearBtn, "secondary");
        clearBtn.setBounds(150, 180, 90, 30);
        clearBtn.addActionListener(this);
        add(clearBtn);

        signupBtn = new JButton("Sign Up");
        HotelStyles.styleButton(signupBtn, "accent");
        signupBtn.setBounds(250, 180, 90, 30);
        signupBtn.addActionListener(this);
        add(signupBtn);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        Object src = ae.getSource();

        if (src == loginBtn) {
            try (UserDAO userDAO = new UserDAO()) {
                String username = usernameField.getText().trim();
                char[] passChars = passwordField.getPassword();

                if (username.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Username cannot be empty");
                    return;
                }

                if (passChars.length < 4) {
                    JOptionPane.showMessageDialog(this, "Password must be at least 4 characters");
                    return;
                }

                if (userDAO.login(username, new String(passChars))) {
                    JOptionPane.showMessageDialog(this, "Login successful!");
                    new Dashboard().setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid username or password");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Login error: " + e.getMessage());
            }
        } else if (src == clearBtn) {
            usernameField.setText("");
            passwordField.setText("");
        } else if (src == signupBtn) {
            new SignupOne().setVisible(true);
            dispose();
        }
    }

    public static void main(String[] args) {
        new Login().setVisible(true);
    }
}

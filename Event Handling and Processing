/**
 * Guest Registration Form with Efficient Event Handling
 * Uses single action listener with event delegation
 */
public class GuestSignup extends JFrame implements ActionListener {

    private JTextField nameField, phoneField, pinField;
    private JRadioButton male, female;
    private JComboBox<String> idTypeBox;
    private JButton next;

    public GuestSignup() {
        setTitle("Hotel Guest Registration");
        setLayout(null);
        setSize(500, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        JLabel nameLabel = new JLabel("Full Name:");
        nameLabel.setBounds(30, 30, 100, 25);
        add(nameLabel);

        nameField = new JTextField();
        nameField.setBounds(140, 30, 200, 25);
        add(nameField);

        JLabel phoneLabel = new JLabel("Phone:");
        phoneLabel.setBounds(30, 70, 100, 25);
        add(phoneLabel);

        phoneField = new JTextField();
        phoneField.setBounds(140, 70, 200, 25);
        add(phoneField);

        JLabel pinLabel = new JLabel("PIN Code:");
        pinLabel.setBounds(30, 110, 100, 25);
        add(pinLabel);

        pinField = new JTextField();
        pinField.setBounds(140, 110, 200, 25);
        add(pinField);

        JLabel genderLabel = new JLabel("Gender:");
        genderLabel.setBounds(30, 150, 100, 25);
        add(genderLabel);

        male = new JRadioButton("Male");
        female = new JRadioButton("Female");
        ButtonGroup genderGroup = new ButtonGroup();
        genderGroup.add(male);
        genderGroup.add(female);

        male.setBounds(140, 150, 80, 25);
        female.setBounds(220, 150, 80, 25);
        add(male);
        add(female);

        JLabel idLabel = new JLabel("ID Type:");
        idLabel.setBounds(30, 190, 100, 25);
        add(idLabel);

        idTypeBox = new JComboBox<>(new String[]{"Aadhar", "Passport", "Driving License"});
        idTypeBox.setBounds(140, 190, 200, 25);
        add(idTypeBox);

        next = new JButton("Next");
        next.setBounds(140, 240, 100, 30);
        add(next);

        // Consolidated event listeners
        next.addActionListener(this);
        male.addActionListener(e -> validateGenderSelection());
        female.addActionListener(e -> validateGenderSelection());

        // Input validation on focus loss
        pinField.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                if (!pinField.getText().matches("\\d{6}")) {
                    showValidationError(pinField, "Invalid PIN (6 digits required)");
                }
            }
        });

        phoneField.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent e) {
                if (!phoneField.getText().matches("\\d{10}")) {
                    showValidationError(phoneField, "Phone must be 10 digits");
                }
            }
        });

        setVisible(true);
    }

    private void validateGenderSelection() {
        if (!male.isSelected() && !female.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select gender");
        }
    }

    private void showValidationError(JComponent field, String message) {
        JOptionPane.showMessageDialog(this, message);
        field.requestFocus();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // Simple validation example
        if (nameField.getText().trim().isEmpty()) {
            showValidationError(nameField, "Name cannot be empty");
            return;
        }

        // Handle storing data or navigating to next screen
        JOptionPane.showMessageDialog(this, "Guest registered successfully!");
        // You could save data to the database here
    }

    public static void main(String[] args) {
        new GuestSignup();
    }
}
